1.在model模型中
构造器中实例化db,并存储在model中的db属性中,
利用db属性获取多行数据

2,在index文件总,定义常量,设置根目录和平台目录
包含进核心类文件,调用核心类的run方法
ROOT_PATH,根目录 
APP_PATH应用平台目录

PLAT平台名称     COntroller控制器名称

3.核心类文件:
调用run方法run://用该方法调用该类下的所有方法
初始化字符集和配置文件,获取路由参数,类的自动加载,请求分发
initcharset:设置字符集
initconfig:把应用平台下的confi文件返回的数组转换成全局变量
initroute:设置路由,如果有路由参数就用路由参数,没有路由
参数就用默认参数
initConst:定义视图文件的路径//注:controller名称为index/news/等,和目录名称一致
initautoload//利用回调函数实现类的自动加载//spl_autoload_register()
initDispatch()获取到控制器的名称,控制器方法的名称路径名,实例化控制器,调用a方法
4.config.php,该文件返回一个数组,包含连接数据库的数据

5.控制器类中,,引入模型类文件,创建实例化模型的方法;
调用fetchall方法,获取到数据,包含视图文件
视图文件做输出展示,但是由控制器调用

db类:单列的数据库操作类,私有成员属性,私有的保存对象的属性,通过私有的构造器
传递参数,并添加方法连接数据库,选择数据库,设置字符集
阻止克隆,通过getinstance实例化对象//初始化类外调用才是真正的实例化
前面+@屏蔽错误输出


**************
@在php中一个抑制错误的符号，即便是你开启了报错功能，只要在错误语句之前加上@符号，便可屏蔽了错误信息。使用@抑制错误之前，会出现一个警告错误。
使用后，警告错误便会消失，只会出现die函数中报错信息.
2、error_reporting屏蔽法    在php文件开始之前，我们可以加上这样一句话error_reporting(0);这个函数的意思是设置 PHP 的报错级别并返回当前级别，0则代表禁用错误报告.
3、display_errors屏蔽法    这种方法应该是最彻底的一种解决办法，因为前两种方法只能作用于单行或者单个文件，这个则是作用于所有的php文件。
**************

